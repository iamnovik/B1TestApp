// <auto-generated />
using System;
using B1TestApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace B1TestApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240817151827_Banks_ReportDate")]
    partial class Banks_ReportDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("B1TestApp.Data.Entity.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.BankAccountData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BankAccountNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.DataRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CyrillicText")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<int>("IntValue")
                        .HasColumnType("integer");

                    b.Property<string>("LatinText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataRecords");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.Files", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.IncomingBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Assets")
                        .HasColumnType("numeric");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Liabilities")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId")
                        .IsUnique();

                    b.ToTable("IncomingBalances");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.OutcomingBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Assets")
                        .HasColumnType("numeric");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Liabilities")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId")
                        .IsUnique();

                    b.ToTable("OutcomingBalances");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.Turnover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId")
                        .IsUnique();

                    b.ToTable("Turnovers");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.Bank", b =>
                {
                    b.HasOne("B1TestApp.Data.Entity.Files", "File")
                        .WithMany("Banks")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.BankAccountData", b =>
                {
                    b.HasOne("B1TestApp.Data.Entity.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.IncomingBalance", b =>
                {
                    b.HasOne("B1TestApp.Data.Entity.BankAccountData", "BankAccountData")
                        .WithOne("IncomingBalance")
                        .HasForeignKey("B1TestApp.Data.Entity.IncomingBalance", "BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountData");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.OutcomingBalance", b =>
                {
                    b.HasOne("B1TestApp.Data.Entity.BankAccountData", "BankAccountData")
                        .WithOne("OutcomingBalance")
                        .HasForeignKey("B1TestApp.Data.Entity.OutcomingBalance", "BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountData");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.Turnover", b =>
                {
                    b.HasOne("B1TestApp.Data.Entity.BankAccountData", "BankAccountData")
                        .WithOne("Turnover")
                        .HasForeignKey("B1TestApp.Data.Entity.Turnover", "BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccountData");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.BankAccountData", b =>
                {
                    b.Navigation("IncomingBalance");

                    b.Navigation("OutcomingBalance");

                    b.Navigation("Turnover");
                });

            modelBuilder.Entity("B1TestApp.Data.Entity.Files", b =>
                {
                    b.Navigation("Banks");
                });
#pragma warning restore 612, 618
        }
    }
}
